/* Per-pixel lighting */

/* A fragment is basically a pixel before it is rasterized. */
/* The first line specifying the precision of floating-point numbers is important because a fragment */
/* shader doesn't have any default precision for them. */
precision mediump float;
uniform vec3 u_LightPos;       /* The position of the light in eye space. */
 
varying vec3 v_Position;       /* Interpolated position for this fragment. */
varying vec4 v_DifColor;       /* Interpolated diffuse color for this fragment. */
varying vec4 v_AmbColor;       /* Interpolated ambient color for this fragment. */
varying vec3 v_Normal;         /* Interpolated normal for this fragment. */

/* The entry point for our fragment shader. */
void main()
{
    /* Will be used for attenuation. */
    float distance = length(u_LightPos - v_Position);

    /* Get a lighting direction vector from the light to the vertex. */
    vec3 lightVector = normalize(u_LightPos - v_Position);

    lightVector = normalize(vec3(1.0, 1.0, 1.0));

 
    /* Calculate the dot product of the light vector and vertex normal. If the normal and light vector are */
    /* pointing in the same direction then it will get max illumination. */
    float intensity = max(dot(v_Normal, lightVector), 0.0);

    gl_FragColor = v_DifColor * intensity + (v_AmbColor * 0.1);

}

