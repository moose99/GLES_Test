/* Vertex Shader */
/* Per-pixel lighting */

/* Uniform variables are used to communicate with your vertex or fragment shader from "outside". */
/* Uniform variables are read-only and have the same value among all processed vertices. */
/* glGetUniformLocation - gets the location */
/* glUniform() - set the uniform value */

uniform mat4 u_MVPMatrix;      /* A constant representing the combined model/view/projection matrix. */
uniform mat4 u_MVMatrix;       /* A constant representing the combined model/view matrix. */



/* Vertex attributes are used to communicate from "outside" to the vertex shader. Unlike uniform variables, values are provided */
/* per vertex (and not globally for all vertices). There are built-in vertex attributes like the normal or the position, or you */
/* can specify your own vertex attribute. Attributes can't be defined in the fragment shader. */
/* glBindAttribLocation - bind the location */
/* glGetAttribLocation - get the location */
/* glVertexAttrib - set the attribute value I*/

attribute vec4 a_Position;     /* Per-vertex position information we will pass in. */
attribute vec4 a_Color;        /* Per-vertex color information we will pass in. */
attribute vec3 a_Normal;       /* Per-vertex normal information we will pass in. */


/* Varying variables provide an interface between Vertex and Fragment Shader. Vertex Shaders compute */
/* values per vertex and fragment shaders compute values per fragment. If you define a varying variable */
/* in a vertex shader, its value will be interpolated (perspective-correct) over the primitive being */
/* rendered and you can access the interpolated value in the fragment shader. */
varying vec3 v_Position;       /* This will be interpolated and passed into the fragment shader. */
varying vec4 v_Color;          /* This will be interpolated and passed into the fragment shader. */
varying vec3 v_Normal;         /* This will be interpolated and passed into the fragment shader. */

void main()                    /* The entry point for our vertex shader. */
{
    /* Pass through the color. */
    v_Color = a_Color;

    /* Transform the vertex into eye space. mat4 * vec4 */
    v_Position = vec3(u_MVMatrix * a_Position);

    /* Transform the normal's orientation into eye space. convert normal to vec4 */
    v_Normal = vec3(u_MVMatrix * vec4(a_Normal, 0.0));

    /* gl_Position is a special variable used to store the final position. */
    /* Multiply the vertex by the matrix to get the final point in normalized screen coordinates. */
    gl_Position = u_MVPMatrix * a_Position;
}
